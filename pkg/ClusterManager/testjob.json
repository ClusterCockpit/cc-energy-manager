{
  "jobId": 1728500,
  "user": "b187cb11",
  "project": "b187cb",
  "cluster": "testcluster",
  "subCluster": "a100",
  "partition": "partition",
  "numNodes": 1,
  "numHwthreads": 16,
  "numAcc": 1,
  "exclusive": 0,
  "monitoringStatus": 1,
  "jobState": "completed",
  "duration": 15,
  "walltime": 54000,
  "resources": [
    {
      "hostname": "a0805",
      "hwthreads": [
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111
      ],
      "accelerators": [
        "00000000:CC:00.0"
      ]
    }
  ],
  "metaData": {
    "jobName": "job_gpu.sh",
    "jobScript": "#!/bin/bash -l\n#SBATCH --gres=gpu:a100:1\n#SBATCH --time=14:59:59            # comments start with # and do not count as interruptions\n#SBATCH --output=/home/atuin/b187cb/b187cb11/mbrl-torch/outs_gpu/%j.out\n#SBATCH --export=NONE\n\nunset SLURM_EXPORT_ENV\n\n\nexport http_proxy=http://proxy:80\nexport https_proxy=http://proxy:80\nexport WANDB_API_KEY=9c658c28c6ef9c221f2a0ce34723c8e526b764e4\n\n\n# Initialize active_sweep_dir variable, used to group runs within a single sweep\nactive_sweep_dir=\"active_sweep_dir/\"\n\n# Initialize active_run_dir variable, used to group seeds sharing the same hyperparameters\nactive_run_dir=\"active_runs/\"\n\nhash_input=''\n# Iterate through command line arguments\nfor arg in \"$@\"; do\n    # Split argument into key and value\n    IFS='=' read -r -a arg_parts <<< \"$arg\"\n\n    # Check if the argument is one of \"env\", \"alg\", or \"tags\"\n    if [[ \"${arg_parts[0]}\" == \"env\" || \"${arg_parts[0]}\" == \"alg\" ]]; then\n        # Append key-value pairs to active_run_dir\n        active_run_dir+=\"${arg_parts[0]}_\"\n\tactive_sweep_dir+=\"${arg_parts[0]}_\"\n    fi\n    \n    # Check if the argument is of the form \"tag=...\"\n    if [ \"${arg_parts[0]}\" == \"tags\" ]; then\n\ttransformed_string=$(echo \"${arg_parts[1]}\" | tr ',' '_')\n        active_sweep_dir+=\"${transformed_string}\"\n    fi\n    \n    # Check if the argument is one of \"env\", \"alg\", or \"tag\"\n    if [[ \"${arg_parts[0]}\" != \"env\" && \"${arg_parts[0]}\" != \"alg\" && \"${arg_parts[0]}\" != \"tags\" ]]; then\n        # Append key-value pairs to active_run_dir\n        active_run_dir+=\"${arg_parts[0]}-${arg_parts[1]}_\"\n    fi\n    hash_input+=$arg\ndone\n\nhash_id=$(echo -n \"$hash_input\" | sha256sum | cut -d' ' -f1)\n\n\n# Remove trailing underscore from active_run_dir\nactive_run_dir=\"${active_run_dir%\"_\"}\"\nactive_sweep_dir=\"${active_sweep_dir%\"_\"}\"\n\n# Check if active_sweep_dir is not empty\nif [ -n \"$active_sweep_dir\" ]; then\n    # Create directory if it doesn't exist\n    if [ ! -d \"$active_sweep_dir\" ]; then\n        mkdir -p \"$active_sweep_dir\"\n    fi\nfi\n\n\n# Check if active_run_dir is not empty\nif [ -n \"$active_run_dir\" ]; then\n    # Create directory if it doesn't exist\n    if [ ! -d \"$active_run_dir\" ]; then\n        mkdir -p \"$active_run_dir\"\n    fi\nfi\n\nactive_run_file=\"${active_run_dir}/${SLURM_JOB_ID}\"\ntouch \"$active_run_file\"\n\nactive_sweep_file=\"${active_sweep_dir}/${SLURM_JOB_ID}\"\ntouch \"$active_sweep_file\"\n\nsource .venv/bin/activate\nexport HYDRA_FULL_ERROR=1\nbase_command=\"python -m mbrl.examples.main algorithm=$1 overrides=$2 dynamics_model=$3\"\n# base_command=\"python -m mbrl.examples.main\"\n\necho $base_command\n# Additional key-value pairs\n# additional_arguments=\"${@:3}\"\n\n# Loop through each key-value pair and append it to the command\n# IFS=' ' read -ra arguments <<< \"$additional_arguments\"\n#for arg in \"${arguments[@]}\"; do\n#  base_command+=\" $arg\"\n#done\n\n\n# quite sure this isnt necessary, are there any ghost processes hanging around on the compute nodes???? \n# however, if yes -- then this should kill them, NOTE: cannot be run in a sweep -> will kill all of the running processes lol\n# pkill -9 -f /home/atuin/b187cb/b187cb11/decimarl/src/main_gpu.py\n\n# Execute the final command\neval \"$base_command\"\n\n\n\n# At the end, remove the created active files\n\n# Check if active_sweep_dir is not empty\nif [ -n \"$active_sweep_dir\" ]; then\n    # delete file with name given by the variable active_sweep_file\n    rm \"$active_sweep_file\"\n\n    # Check if active_sweep_dir is empty after file deletion and if yes, remove it\n    if [ -z \"$(ls -A \"$active_sweep_dir\")\" ]; then\n        rm -rf \"$active_sweep_dir\"\n    fi\nfi\n\n\n# Check if active_sweep_dir is not empty\nif [ -n \"$active_run_dir\" ]; then\n    # delete file with name given by the variable active_sweep_file\n    rm \"$active_run_file\"\n\n    # Check if active_run_dir is empty after file deletion and if yes, remove it\n    if [ -z \"$(ls -A \"$active_run_dir\")\" ]; then\n        rmdir \"$active_run_dir\"\n    fi\nfi\n\n",
    "slurmInfo": "\nJobId=1728500 JobName=job_gpu.sh\n   UserId=b187cb11(210814) GroupId=80142\n   Account=b187cb QOS=normal \n   Requeue=False Restarts=0 BatchFlag=True \n   TimeLimit=900\n   SubmitTime=2024-06-14T14:41:47\n   Partition=a100 \n   NodeList=a0805\n   NumNodes=1 NumCPUs=16 NumTasks=1 CPUs/Task=16\n   NTasksPerNode:Socket:Core=0:0:0\n   TRES_req=cpu=1,mem=7500M,node=1,billing=1,gres/gpu=1,gres/gpu:a100=1\n   TRES_alloc=cpu=16,mem=120000M,node=1,billing=16,gres/gpu=1,gres/gpu:a100=1\n   Command=/home/atuin/b187cb/b187cb11/mbrl-torch/job_gpu.sh\n   WorkDir=/home/atuin/b187cb/b187cb11/mbrl-torch\n   StdErr=/home/atuin/b187cb/b187cb11/mbrl-torch/outs_gpu/1728500.out\n   StdOut=/home/atuin/b187cb/b187cb11/mbrl-torch/outs_gpu/1728500.out\n"
  },
  "concurrentJobs": {
    "items": null,
    "count": 0
  },
  "startTime": 1718369256,
  "statistics": {
    "acc_mem_used": {
      "unit": {
        "base": "B",
        "prefix": "M"
      },
      "avg": 513.812,
      "min": 513.812,
      "max": 513.812
    },
    "acc_power": {
      "unit": {
        "base": "W"
      },
      "avg": 56.399,
      "min": 56.399,
      "max": 56.399
    },
    "acc_utilization": {
      "unit": {
        "base": ""
      },
      "avg": 0,
      "min": 0,
      "max": 0
    },
    "clock": {
      "unit": {
        "base": "Hz",
        "prefix": "M"
      },
      "avg": 2178.121,
      "min": 2178.121,
      "max": 2178.121
    },
    "core_power": {
      "unit": {
        "base": "W"
      },
      "avg": 0.167,
      "min": 0.167,
      "max": 0.167
    },
    "cpu_load": {
      "unit": {
        "base": ""
      },
      "avg": 8.86,
      "min": 8.86,
      "max": 8.86
    },
    "cpu_power": {
      "unit": {
        "base": "W"
      },
      "avg": 113.209,
      "min": 113.209,
      "max": 113.209
    },
    "cpu_user": {
      "unit": {
        "base": ""
      },
      "avg": 0.71,
      "min": 0.71,
      "max": 0.71
    },
    "flops_any": {
      "unit": {
        "base": "Flops/s",
        "prefix": "G"
      },
      "avg": 0,
      "min": 0,
      "max": 0
    },
    "ipc": {
      "unit": {
        "base": "IPC"
      },
      "avg": 0.925,
      "min": 0.925,
      "max": 0.925
    },
    "mem_bw": {
      "unit": {
        "base": "B/s",
        "prefix": "G"
      },
      "avg": 4.272,
      "min": 4.272,
      "max": 4.272
    },
    "mem_used": {
      "unit": {
        "base": "B",
        "prefix": "G"
      },
      "avg": 29.946,
      "min": 29.946,
      "max": 29.946
    },
    "net_bytes_in": {
      "unit": {
        "base": "B/s"
      },
      "avg": 448800.874,
      "min": 448800.874,
      "max": 448800.874
    },
    "net_bytes_out": {
      "unit": {
        "base": "B/s"
      },
      "avg": 1831226.92,
      "min": 1831226.92,
      "max": 1831226.92
    },
    "nv_mem_util": {
      "unit": {
        "base": ""
      },
      "avg": 0,
      "min": 0,
      "max": 0
    },
    "nv_sm_clock": {
      "unit": {
        "base": "Hz",
        "prefix": "M"
      },
      "avg": 210,
      "min": 210,
      "max": 210
    },
    "nv_temp": {
      "unit": {
        "base": "Â°C"
      },
      "avg": 35,
      "min": 35,
      "max": 35
    }
  }
}

